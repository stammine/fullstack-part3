{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","personId","delete","id","put","Notification","message","isError","undefined","className","SearchFilter","searchTerm","updateSearch","value","onChange","PersonDetails","person","deleteAndUpdate","name","number","onClick","event","window","confirm","PersonList","persons","personsToShow","length","filter","toLowerCase","indexOf","map","key","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setSearchTerm","setMessage","errorMessage","setErrorMessage","useEffect","personService","success","setTimeout","failed","target","onSubmit","preventDefault","newItem","matches","updatedItem","updatedPersons","catch","err","errorMsg","error","console","createdItem","newNames","concat","type","newPersons","per","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a38c9e17.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = personId => {\n    const request = axios.delete(`${baseUrl}/${personId}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons';\n\nconst Notification = ({ message, isError }) => {\n  if (message === null || message === undefined) {\n    return null\n  }\n\n  return (\n    <div className={isError ? 'errorNotification' : 'notification'} >\n      {message}\n    </div>\n  )\n}\n\nconst SearchFilter = ({searchTerm, updateSearch}) => {\n    return (\n        <div>\n            filter shown with: <input value={searchTerm} onChange={updateSearch} />\n        </div>\n    )\n}\n\nconst PersonDetails = ({person, deleteAndUpdate}) => {\n    const deletePerson = event => {\n      const confirmed = window.confirm(`Delete ${person.name}?`);\n      if (confirmed) {\n        const id = person.id\n        deleteAndUpdate(id, person.name)\n      }\n    }\n    return <div className=\"person\" >{person.name} {person.number} <button onClick={deletePerson} >Delete</button></div>\n}\n\nconst PersonList = ({persons, searchTerm, deleteAndUpdate}) => {\n    const personsToShow = (searchTerm.length === 0) \n        ? persons \n        : persons.filter(person => person.name.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1)\n    return (\n        <div>{personsToShow.map(person => \n          <PersonDetails\n            key={person.name}\n            person={person} \n            deleteAndUpdate={deleteAndUpdate} />)}</div>\n    )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n  const [ message, setMessage ] = useState()\n  const [ errorMessage, setErrorMessage ] = useState()\n\n  useEffect(() => {\n    const eventHandler = response => {\n      setPersons(response)\n    }\n    personService.getAll().then(eventHandler)\n  }, [])\n\n  const updateNewName = (event) => setNewName(event.target.value)\n  const updateNewNumber = (event) => setNewNumber(event.target.value)\n  const updateSearch = (event) => setSearchTerm(event.target.value)\n\n  const success = message => {\n    setNewName('')\n    setNewNumber('')\n    setMessage(message)\n    setTimeout(() => {\n      setMessage(null)\n    }, 5000)\n  };\n\n  const failed = message => {\n    setErrorMessage(message)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n  };\n\n  const addNewName = (event) => {\n      event.preventDefault()\n      const newItem = {name: newName, number: newNumber}\n\n      const matches = persons.filter(person => person.name === newName)\n      if(matches.length > 0) {\n        const confirmed = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n        if (confirmed) {\n          const personId = matches[0].id;\n          personService.update(personId, newItem).then((updatedItem) => {\n            const updatedPersons = [...persons.map(person => {\n              if(person.id === personId) {\n                return updatedItem\n              }\n              return person\n            })]\n            setPersons(updatedPersons)\n            success(`Updated '${newItem.name}'.`)\n          }).catch(err => {\n            const res = err.response;\n            const errorMsg = res.data.error;\n            failed(errorMsg);\n            console.error(err)\n          })\n        }\n      } else {\n        personService.create(newItem).then((createdItem) => {\n          const newNames = persons.concat([createdItem])\n          setPersons(newNames)\n          success(`Added '${newItem.name}'.`)\n        }).catch(err => {\n          const res = err.response;\n          const errorMsg = res.data.error;\n          failed(errorMsg);\n          console.error(err)\n        })\n      }\n  }\n\n  const deleteAndUpdate = (id, name) => {\n    personService.remove(id).then(() => {\n      const newPersons = [...persons.filter(per => per.id !== id)]\n      setPersons(newPersons)\n    }).catch(err => {\n      failed(`Information of '${name}' has already been removed from server.`);\n      console.error(err)\n    })\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} isError={false} />\n      <Notification message={errorMessage} isError={true} />\n      <SearchFilter searchTerm={searchTerm} updateSearch={updateSearch} />\n      <h2>add a new</h2>\n      <form onSubmit={addNewName}>\n        <div>\n          name: <input value={newName} onChange={updateNewName} />\n        </div>\n        <div>\n            number: <input value={newNumber} onChange={updateNewNumber} />\n        </div>\n        <div>\n          <button type=\"submit\" >add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <PersonList persons={persons} searchTerm={searchTerm} deleteAndUpdate={deleteAndUpdate} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}